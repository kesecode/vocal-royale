#!/usr/bin/env sh

# keine stillen Abbr√ºche ‚Äì wir handeln Fehler selbst
set -u

# Ins app-Verzeichnis wechseln
cd "$(git rev-parse --show-toplevel)/app"

# Farben (falls Terminal unterst√ºtzt)
if [ -t 1 ]; then
  RED="$(printf '\033[31m')"
  GREEN="$(printf '\033[32m')"
  YELLOW="$(printf '\033[33m')"
  BOLD="$(printf '\033[1m')"
  RESET="$(printf '\033[0m')"
else
  RED=""; GREEN=""; YELLOW=""; BOLD=""; RESET=""
fi

echo "${BOLD}üîé Pre-commit: app/${RESET}"

# 1) Nur laufen lassen, wenn in app/ relevante Dateien gestaged sind
STAGED_MATCHING_FILES="$(git diff --name-only --cached -- \
  'src/**' \
  '**/*.svelte' '**/*.ts' '**/*.js' '**/*.tsx' '**/*.jsx' \
  '**/*.json' '**/*.css' '**/*.md' \
  | tr -d '\r')"

if [ -z "$STAGED_MATCHING_FILES" ]; then
  echo "‚úÖ Keine relevanten Dateien in app/ gestaged ‚Äì √ºberspringe lint-staged."
else
  echo "üßπ lint-staged l√§uft‚Ä¶"
  if ! npx lint-staged --quiet; then
    echo "${RED}‚ùå lint-staged hat Fehler gemeldet. Commit abgebrochen.${RESET}"
    exit 1
  fi
fi

# 2) Vollst√§ndiger Lint-Check (wie in CI) ‚Äì immer ausf√ºhren
echo "üß™ npm run lint (vollst√§ndiger Check)‚Ä¶"
LINT_OUTPUT="$(npm run -s lint 2>&1)"
LINT_STATUS=$?

if [ $LINT_STATUS -ne 0 ]; then
  echo "${RED}‚ùå Lint-Check fehlgeschlagen. Commit abgebrochen.${RESET}"
  echo "‚Äî Ausgabe ‚Äî"
  echo "$LINT_OUTPUT"
  exit 1
fi

echo "${GREEN}‚úÖ Alles sauber. Commit kann erstellt werden.${RESET}"